[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode unshaded, depth_draw_alpha_prepass;

varying vec2 size;

void vertex() {
	vec3 p = VERTEX;
	
	float x_asp = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	float y_asp = VIEWPORT_SIZE.y / VIEWPORT_SIZE.x;
	
	vec2 scl = vec2(1.0) / VIEWPORT_SIZE;
	scl.y *= VIEWPORT_SIZE.y / VIEWPORT_SIZE.x;
	
	vec4 cp = vec4(p, 1.0);
	
	cp = PROJECTION_MATRIX * INV_CAMERA_MATRIX * cp;
	cp.xyz /= cp.w;
	cp.w = 1.0;
	
	vec2 sx = vec2(1.0, 0.0);
	sx.y *= y_asp;
	sx = normalize(sx);
	sx.x *= y_asp;
	vec2 sy = vec2(-sx.y, sx.x);
	sy.x *= y_asp;
	sy.y *= x_asp;
	
	sx *= scl * UV.x;
	sy *= scl * UV.y;
	
	cp.xy += (sx + sy);
	
	POSITION = cp;
	
	float r = length(scl);
	
	size = vec2(r);
	UV = UV / abs(UV);
}

void fragment() {
	vec2 p = UV * size;
	float r = min(size.x, size.y);
	vec2 b = size - r;
	vec2 d = abs(p) - b;
	float dst1 = min(max(d.x, d.y), 0.0);
	float dst2 = length(max(d, 0.0));
	float dst = (dst1 + dst2) - r;
	
	ALPHA = step(dst, 0.0);
	ALBEDO *= COLOR.rgb;
	ALPHA *= COLOR.a;
}




"
