[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode unshaded;

varying vec2 size;

void vertex() {
	vec4 p = vec4(VERTEX, 1.0);
	
	float rad = UV2.x * 0.5;
	
	p = PROJECTION_MATRIX * INV_CAMERA_MATRIX * p;
	p.xyz /= p.w;
	p.w = 1.0;
	
	p.y = -p.y;
	p.xy = (p.xy * 0.5 + 0.5) * VIEWPORT_SIZE;
	
	p.xy += UV * rad;
	
	p.xy = (p.xy / VIEWPORT_SIZE) * 2.0 - 1.0;
	p.y = -p.y;
	p.z = 0.0;
	
	POSITION = p;
	
	size = vec2(rad);
}

void fragment() {
	vec2 p = UV * size;
	float d = (p.x * p.x + p.y * p.y) - (size.y * size.y);
	
	ALPHA = -d;
	ALBEDO *= COLOR.rgb;
	ALPHA_SCISSOR = 0.0;
}




"
