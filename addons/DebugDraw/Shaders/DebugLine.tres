[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode unshaded, depth_draw_alpha_prepass;

varying vec2 size;

void vertex() {
	vec3 wpa = VERTEX;
	vec3 wpb = VERTEX + NORMAL;
	
	vec2 scl = 1.0 / VIEWPORT_SIZE;
	scl.x *= VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	
	vec4 cpa = (INV_CAMERA_MATRIX * vec4(wpa, 1.0));
	vec4 cpb = (INV_CAMERA_MATRIX * vec4(wpb, 1.0));
	
	vec3 off = cpb.xyz - cpa.xyz;
	vec3 sy = off.x == 0.0 && off.y == 0.0 ? vec3(0.0, 1.0, 0.0) : normalize(vec3(-off.y, off.x, 0.0));
	vec3 sx = vec3(sy.y, -sy.x, 0.0);
	
	sx = (PROJECTION_MATRIX * vec4(sx, 0.0)).xyz;
	sy = (PROJECTION_MATRIX * vec4(sy, 0.0)).xyz;
	if (PROJECTION_MATRIX[3][3] != 0.0) {
		float h = abs(1.0 / (2.0 * PROJECTION_MATRIX[1][1]));
		float sc = (h * 2.0); //consistent with Y-fov
		sx.xy *= sc * 1.5;
		sy.xy *= sc * 1.5;
	}
	
	sx.xy *= scl * UV.x;
	sy.xy *= scl * UV.y;
	
	cpa = PROJECTION_MATRIX * cpa;
	cpb = PROJECTION_MATRIX * cpb;
	cpa.xyz /= abs(cpa.w);
	cpb.xyz /= abs(cpb.w);
	cpa.w = 1.0;
	cpb.w = 1.0;
	
	off = cpb.xyz - cpa.xyz;
	
	vec4 p = cpa;
	p.xyz += off * max(sign(UV.x), 0.0);
	p.xy += (sy + sx).xy;
	POSITION = p;
	
	float l = length(off.xy);
	float r = length(sx.xy);
	
	size = vec2(l * 0.5 + r, r);
	UV = UV / (abs(UV));
}

void fragment() {
	vec2 p = UV * size;
	float r = min(size.x, size.y);
	vec2 b = size - r;
	vec2 d = abs(p) - b;
	float dst1 = min(max(d.x, d.y), 0.0);
	float dst2 = length(max(d, 0.0));
	float dst = (dst1 + dst2) - r;
	
	ALPHA = -dst;
	ALBEDO *= COLOR.rgb;
	ALPHA_SCISSOR = 0.0;
}




"
